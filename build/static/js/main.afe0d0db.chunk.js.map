{"version":3,"sources":["services/persons.js","components/Notification.js","components/Filter.js","components/PersonForm.js","components/Person.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","newObject","post","remove","id","delete","update","put","Notification","message","className","Filter","props","value","newFilter","onChange","handleFilterChange","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Person","person","deletePerson","name","number","onClick","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","setMessage","setClassName","useEffect","initialPersons","timeOutMessage","length","setTimeout","emptyInputs","checkDuplicates","find","p","showAlert","window","alert","e","target","preventDefault","newPerson","confirm","changedPerson","map","catch","error","status","console","log","filter","concat","toLowerCase","includes","i","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afe0d0db.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  axios.delete(`${baseUrl}/${id}`);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\nconst personService = {\n  getAll,\n  create,\n  remove,\n  update,\n};\n\nexport default personService;\n","import React from 'react';\n\nexport const Notification = ({ message, className }) => {\n  if (message === null) return null;\n  return <div className={className}>{message}</div>;\n};\n","import React from 'react';\n\nexport const Filter = (props) => {\n  return (\n    <div>\n      search names:{' '}\n      <input value={props.newFilter} onChange={props.handleFilterChange} />\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number:{' '}\n        <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\n\nexport const Person = ({ person, deletePerson }) => {\n  return (\n    <li>\n      {person.name} {person.number}\n      <button onClick={deletePerson}>delete</button>\n    </li>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport personService from './services/persons';\nimport { Notification } from './components/Notification';\nimport { Filter } from './components/Filter';\nimport { PersonForm } from './components/PersonForm';\nimport { Person } from './components/Person';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newFilter, setNewFilter] = useState('');\n  const [message, setMessage] = useState(null);\n  const [className, setClassName] = useState('');\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const addPerson = (e) => {\n    e.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n    if (checkDuplicates()) {\n      if (\n        window.confirm(\n          `${newPerson.name} already exists in phonebook. do you want to update ${newPerson.name}'s number?`\n        )\n      ) {\n        const id = checkDuplicates().id;\n        const changedPerson = { ...newPerson, number: newNumber };\n        personService\n          .update(id, changedPerson)\n          .then((changedPerson) => {\n            setPersons(\n              persons.map((person) =>\n                person.id !== id ? person : changedPerson\n              )\n            );\n          })\n          .catch((error) => {\n            if (error.response.status === 400) {\n              setMessage(`${error.response.data}`);\n              setClassName('error');\n              timeOutMessage(3000);\n              emptyInputs();\n            } else {\n              console.log(error.response);\n              setMessage(\n                `${changedPerson.name} was already removed from the server`\n              );\n              setClassName('error');\n              timeOutMessage(3000);\n              setPersons(persons.filter((p) => p.id !== id));\n              emptyInputs();\n            }\n          });\n\n        return;\n      } else {\n        showAlert(`${newName} already exists in phonebook.`);\n        emptyInputs();\n        return;\n      }\n    }\n\n    personService\n      .create(newPerson)\n      .then((newPerson) => {\n        setPersons(persons.concat(newPerson));\n        emptyInputs();\n        setMessage(`${newPerson.name} has been added.`);\n        setClassName('success');\n        timeOutMessage(3000);\n      })\n      .catch((error) => {\n        setMessage(`${error.response.data}`);\n        setClassName('error');\n        timeOutMessage(3000);\n      });\n  };\n\n  const timeOutMessage = (length) => {\n    setTimeout(() => {\n      setMessage(null);\n    }, length);\n  };\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleFilterChange = (e) => {\n    setNewFilter(e.target.value);\n  };\n\n  const emptyInputs = () => {\n    setNewName('');\n    setNewNumber('');\n  };\n\n  const checkDuplicates = () => {\n    return persons.find((p) => p.name === newName);\n  };\n\n  const showAlert = (message) => {\n    return window.alert(message);\n  };\n\n  const deletePerson = (id) => {\n    personService.remove(id);\n    setPersons(persons.filter((p) => p.id !== id));\n    setMessage('entry removed');\n    setClassName('success');\n  };\n\n  const filter = () => {\n    if (newFilter) {\n      return persons.filter((p) =>\n        p.name.toLowerCase().includes(newFilter.toLowerCase())\n      );\n    }\n    return persons;\n  };\n\n  return (\n    <div>\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h2>Phonebook</h2>\n      <Notification message={message} className={className} />\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <br />\n      {filter().map((person, i) => {\n        return (\n          <Person\n            key={i}\n            person={person}\n            deletePerson={() => deletePerson(person.id)}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}